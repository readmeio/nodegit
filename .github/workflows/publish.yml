on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  build:
    # TODO: should we run the tests, or can we assume that a v* tag ought to
    # get published?
    name: build
    strategy:
      matrix:
        node: [20]
        os:
          # macos-14 is arm64 (m1)
          - name: darwin
            host: macos-14

          # macos-13 is x86
          - name: mac-x64
            host: macos-13

          # ubuntu-22.04 is x86. Still no arm linux runners yet
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
          - name: linux
            host: ubuntu-22.04

          - name: linux-arm
            host: ubuntu-22.04-arm
    env:
      CC: clang
      CXX: clang++
      npm_config_clang: 1
      GYP_DEFINES: use_obsolete_asm=true
      CXXFLAGS: -std=c++17
    runs-on: ${{ matrix.os.host }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions/setup-node@v6
        with:
          node-version: 20
          check-latest: true
      - name: Prebuildify
        run: |
          [[ $(uname -o) == *Linux ]] && \
            sudo apt-get update && \
            sudo apt-get install -y software-properties-common git build-essential clang libssl-dev libkrb5-dev libc++-dev wget python3 zlib1g-dev

          npm ci
          npx prebuildify --napi --strip --tag-libc -t "$(node --version | tr -d 'v')"
      - uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ runner.os }}-${{ runner.arch }}
          path: ./prebuilds
          retention-days: 14

  # there are no alpine builders, so we do our musl builds in qemu, which is
  # slow as a dumb running sonic. TODO: figure out how to cross-compile
  # on the ubuntu runners; if we can it would save a ton of time
  cross-compile:
    name: "cross compile ${{ matrix.platform }}-musl"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
          - platform: linux/arm64
            arch: arm64
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v3
      - name: build linux musl ${{ matrix.arch }}
        run: |
          docker build --platform=${{ matrix.platform }} --tag nodegit-linux-musl-${{ matrix.arch }} -f scripts/Dockerfile.alpine .
          docker create --platform=${{ matrix.platform }} --name nodegit-linux-musl-${{ matrix.arch }} nodegit-linux-musl-${{ matrix.arch }}
          docker cp "nodegit-linux-musl-${{ matrix.arch }}:/app/prebuilds" .
      - name: "list the generated files"
        run: find prebuilds
      - uses: actions/upload-artifact@v4
        with:
          name: prebuild-linux-musl-${{ matrix.arch }}
          path: ./prebuilds
          retention-days: 14

  # https://docs.npmjs.com/generating-provenance-statements#publishing-packages-with-provenance-via-github-actions
  publish:
    runs-on: ubuntu-latest
    needs: [build, cross-compile]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions/setup-node@v6
        with:
          node-version: 20
          check-latest: true
          registry-url: "https://registry.npmjs.org"
      - name: download built libraries
        id: download
        uses: actions/download-artifact@v4
        with:
          path: prebuilds
      - name: copy libs
        run: |
          set -x
          mkdir -p prebuilds/linux-arm64
          mkdir -p prebuilds/linux-x64
          mkdir -p prebuilds/darwin-arm64
          find ${{ steps.download.outputs.download-path }}
          mv ${{ steps.download.outputs.download-path}}/prebuild-Linux-X64/linux-x64/* ./prebuilds/linux-x64/
          mv ${{ steps.download.outputs.download-path}}/prebuild-linux-musl-arm64/linux-arm64/* ./prebuilds/linux-arm64/
          mv ${{ steps.download.outputs.download-path}}/prebuild-linux-musl-arm64/linux-x64/* ./prebuilds/linux-x64/
          mv ${{ steps.download.outputs.download-path}}/prebuild-macOS-ARM64/darwin-arm64/* ./prebuilds/darwin-arm64/
          mv ${{ steps.download.outputs.download-path}}/prebuild-macOS-X64/darwin-x64/* ./prebuilds/darwin-x64/
          find ./prebuilds
      - name: npm install
        run: npm ci

      # this works without a token because this repo is configured via OIDC
      # https://docs.npmjs.com/trusted-publishers
      - name: publish
        run: |
          npm publish --provenance --access public
